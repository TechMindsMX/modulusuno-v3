buildscript {
  repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://repo.grails.org/grails/core" }
    maven { url "https://plugins.gradle.org/m2/" }
  }
  dependencies {
    classpath "org.grails:grails-gradle-plugin:$grailsVersion"
    classpath "com.bertramlabs.plugins:asset-pipeline-gradle:2.9.5"
    classpath "org.grails.plugins:hibernate5:6.0.7"
    classpath "org.grails.plugins:database-migration:3.0.0"
    classpath "org.grails.plugins:views-gradle:1.1.5"
    // classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.2.1"
    // classpath "net.saliman:gradle-cobertura-plugin:2.4.0"
  }
}

version "0.1"
group "web"

apply plugin:"eclipse"
apply plugin:"idea"
apply plugin:"war"
apply plugin:"org.grails.grails-web"
apply plugin:"org.grails.grails-gsp"
apply plugin:"asset-pipeline"
apply plugin:"org.grails.plugins.views-json"

// apply plugin: "org.sonarqube"
// apply plugin: "net.saliman.cobertura"

repositories {
  mavenLocal()
  maven { url "https://repo.grails.org/grails/core" }
  maven { url "https://jitpack.io" }
}

dependencyManagement {
  imports {
    mavenBom "org.grails:grails-bom:$grailsVersion"
  }
  applyMavenExclusions false
}

// cobertura {
//   coverageFormats = ['html','xml']
// }
//
// sonarqube {
//   properties {
//     property "sonar.language", "grvy"
//     property "sonar.sources", "grails-app"
//     property "sonar.tests", "src/test"
//     property "sonar.test.inclusion", "**/*Spec.*"
//     property "sonar.surefire.reportsPath", "build/test-results"
//     property "sonar.cobertura.reportPath", "build/reports/cobertura/coverage.xml"
//     property "sonar.groovy.cobertura.reportPath", "build/reports/cobertura/coverage.xml"
//     property "sonar.exclusions", "grails-app/assets/javascripts/third-party/*,grails-app/migrations/*"
//     property "sonar.core.codeCoveragePlugin", "cobertura"
//   }
// }

dependencies {
  compile "org.springframework.boot:spring-boot-starter-logging"
  compile "org.springframework.boot:spring-boot-autoconfigure"
  compile "org.grails:grails-core"
  compile "org.springframework.boot:spring-boot-starter-actuator"
  compile "org.springframework.boot:spring-boot-starter-tomcat"
  compile "org.grails:grails-dependencies"
  compile "org.grails:grails-web-boot"
  compile "org.grails.plugins:cache"
  compile "org.grails.plugins:scaffolding"
  compile "org.grails.plugins:hibernate5"
  compile "org.hibernate:hibernate-core:5.1.2.Final"
  compile "org.hibernate:hibernate-ehcache:5.1.2.Final"
  console "org.grails:grails-console"
  profile "org.grails.profiles:web"

  runtime "org.grails.plugins:asset-pipeline"
  runtime "org.springframework:spring-test:4.0.7.RELEASE"

  testCompile "org.grails:grails-plugin-testing"
  testCompile "org.grails.plugins:geb"
  testRuntime "org.seleniumhq.selenium:selenium-htmlunit-driver:2.47.1"
  testRuntime "net.sourceforge.htmlunit:htmlunit:2.18"

  compile "mysql:mysql-connector-java:5.1.42"
  compile 'org.grails.plugins:grails-melody-plugin:1.65.0'
  compile 'org.grails.plugins:database-migration:3.0.0'
  compile 'org.liquibase:liquibase-core:3.5.3'
  compile 'org.grails.plugins:excel-export:2.0.1'
  compile 'org.grails.plugins:rendering:2.0.3'
  compile 'org.grails.plugins:spring-security-core:3.1.1'
  compile 'org.grails.plugins:views-json:1.1.5'
}

grails {
  plugins {
    compile project(':m1core')
  }
}

sourceSets {
  main {
    resources {
      srcDir 'grails-app/migrations'
    }
  }
}

bootRun {
  jvmArgs('-Dspring.output.ansi.enabled=always')
}


assets {
  minifyJs = true
  minifyCss = true
}
